import java.util.Date;
import java.util.Scanner;

public class Exercise_11_3 {
	public static void main(String[] args) {
	
		//creating 3 checking accounts and 3 savings accounts
		Checking [] checking = new Checking[3];
		Savings [] savings = new Savings[3];
			for (int i = 0; i < 3; i++) {
				checking[i] = new Checking(i, 400.0, 200.0, new java.util.Date());
				savings[i] = new Savings(i, 800.0, i * 0.02, new java.util.Date());		
			}
			boolean AccountEditing;
		while (AccountEditing = true) {
		  Scanner input = new Scanner(System.in);
		    System.out.println("1 for checking or 2 for savings?");	
		    	int accountType = input.nextInt();
		    	
		    	if (accountType == 1) {
		    		System.out.println("Please enter the account id 1-3");
		    			int accountId = input.nextInt();
		    		checkingMainMenu(checking[accountId]);
		    	}else if(accountType == 2){
		    		System.out.println("Please enter the account id 1-3");
	    				int accountId = input.nextInt();
	    			savingsMainMenu(savings[accountId]);
		    	}else {
		    		System.out.println("Error");
		    		continue;
		    	}		
			}	
	}
	private static boolean savingsMainMenu(Savings savings) {
		Scanner input = new Scanner(System.in);
		int option;
			do {
				System.out.println(" Savings Main Menu" + "\n 1: check balance" + "\n 2: withdraw" + "\n 3: deposit" + "\n 4: exit");
				option = input.nextInt();
					if (option < 1 || option > 4) {
						System.out.print("Incorrect value.");
						continue;
					}else if (option != 4 ) {
						System.out.println(accountEditor(option, null, savings));
						continue;
					}
			
				}while (option != 4);
		

		return true;
		
	}

	private static boolean checkingMainMenu(Checking checking) {
		Scanner input = new Scanner(System.in);
		int option;
			do {
				System.out.println(" Checking Main Menu" + "\n 1: check balance" + "\n 2: withdraw" + "\n 3: deposit" + "\n 4: exit");
				option = input.nextInt();
					if (option < 1 || option > 4) {
						System.out.print("Incorrect value.");
						continue;
					}else if (option != 4 ) {
						System.out.println(accountEditor(option, checking, null));
						continue;
					}
			
				}while (option != 4);
		

		return true;
		
	}

	private static String accountEditor(int option, Checking checking, Savings savings) {
		Scanner input = new Scanner(System.in);
		String edit = "";
		switch (option) {
		
			case 1:
				if (savings == null) {
					edit =  "The balance is "+checking.getBalance();
						break;
				}else {
					edit =  "The balance is "+savings.getBalance();		
						break;
				}
				
			case 2:
				if (savings == null) {
					System.out.println("Enter an amount to withdraw: ");
						double withdrawAmount = input.nextDouble();
							checking.withdraw(withdrawAmount);
								break;
				}else {
					System.out.println("Enter an amount to withdraw: ");
					double withdrawAmount = input.nextDouble();
						savings.withdraw(withdrawAmount);
							break;
				}
			case 3:
				if (savings == null) {
					System.out.println("Enter an amount to deposit: ");
						double depositAmount = input.nextDouble();
							checking.deposit(depositAmount);
								break;
				}else {
					System.out.println("Enter an amount to deposit: ");
						double depositAmount = input.nextDouble();
							savings.deposit(depositAmount);
								break;
				}
		}
		return edit;
	}
	}

class Account{
	
	private int id;
	private double balance;
	private double annualInterestRate;
	private Date dateCreated;
	
Account(){
	id = 0;
	balance = 0;
	annualInterestRate = 0;
	dateCreated = new Date();
}

Account(int newId, double newBalance, double newAnnualInterestRate, Date newDateCreated){
	id = newId;
	balance = newBalance;
	annualInterestRate = newAnnualInterestRate;
	dateCreated = newDateCreated;
}
int getId(){
	return id;
}
void setId(int newId) {
	id = newId;
}
double getBalance() {
	return balance;
}
void setBalance(double newBalance) {
	balance = newBalance;
}
double getAnnualInterestRate() {
	return annualInterestRate;
}
void setAnnualInterestRate(double newAnnualInterestRate) {
	annualInterestRate = newAnnualInterestRate;
}
Date getDateCreated(){
	return dateCreated;
}
double getMonthlyInterestRate() {
	return ((annualInterestRate / 100) /12); 
}
double getMonthlyInterest() {
	return (balance * getMonthlyInterestRate());
}
void withdraw(double amount) {
	if (amount > 0 && amount <= balance) {
	 balance -= amount;}
}
void deposit(double amount) {
	if (amount > 0) { 
	balance += amount;}
}
}
class Checking extends Account{
	private double overDraftLimit;
Checking(){
	this.overDraftLimit = 0.0;
}
Checking(int id, double balance, double overDraftLimit, Date dateCreated){
	super(id, balance, 0.0, dateCreated);
	this.overDraftLimit = overDraftLimit;
}
void setOverDraftLimit(double overDraftLimit) {
	this.overDraftLimit = overDraftLimit;
}
@Override
void withdraw(double ammount) {
	if (ammount > 0 && ammount <= (getBalance() + overDraftLimit));{
		setBalance(getBalance() - ammount);
	}
}
}

class Savings extends Account{
	
Savings(){
	super();
}
Savings(int id, double balance, double annualInterestRate, Date dateCreated){
	super(id, balance, annualInterestRate, dateCreated);
}
@Override
void withdraw(double ammount) {
	if (ammount > 0 && ammount <= getBalance());{
		setBalance(getBalance() - ammount);
	}
}
}
