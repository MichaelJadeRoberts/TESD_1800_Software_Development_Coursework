import java.util.Scanner;

public class Exercise_10_3 {
	public static void main(String[] args) {
		
		Scanner input = new Scanner(System.in);
			System.out.print("Please enter an integer to test out the class made for exercise 10-3: ");
		
		MyInteger myInteger1 = new MyInteger (input.nextInt());
		
		//testing non-static methods isEven(), isOdd(), and isPrime()
			if (myInteger1.isEven()) {
				System.out.println("Testing non-static method isEven(); if " +myInteger1.getValue()+ " is even, if this prints, it returned true");
					}else {
						System.out.println("Testing non-static method isEven(); if " +myInteger1.getValue()+ " is even, if this prints, it returned false");}
			if (myInteger1.isOdd()) {
				System.out.println("Testing non-static method isOdd(); if " +myInteger1.getValue()+ " is odd, if this prints, it returned true");
					}else {
						System.out.println("Testing non-static method isOdd(); if " +myInteger1.getValue()+ " is odd, if this prints, it returned false");}
			if (myInteger1.isPrime()) {
				System.out.println("Testing non-static method isPrime(); if " +myInteger1.getValue()+ " is prime, if this prints, it returned true");
					}else {
						System.out.println("Testing non-static method isPrime(); if " +myInteger1.getValue()+ " is prime, if this prints, it returned false");}
			
		//testing The static methods isEven(int), isOdd(int), and isPrime(int)
			if (MyInteger.isEven(myInteger1)) {
				System.out.println("Testing static method isEven(int); if " +myInteger1.getValue()+ " is even, if this prints, it returned true");
					}else {
						System.out.println("Testing static method isEven(int); if " +myInteger1.getValue()+ " is even, if this prints, it returned false");}
			if (MyInteger.isOdd(myInteger1)) {
				System.out.println("Testing static method isOdd(int); if " +myInteger1.getValue()+ " is odd, if this prints, it returned true");
					}else {
						System.out.println("Testing static method isOdd(int); if " +myInteger1.getValue()+ " is odd, if this prints, it returned false");}
			if (MyInteger.isPrime(myInteger1)) {
				System.out.println("Testing static method isPrime(int); if " +myInteger1.getValue()+ " is prime, if this prints, it returned true");
					}else {
						System.out.println("Testing static method isPrime(int); if " +myInteger1.getValue()+ " is prime, if this prints, it returned false");}
			
			//testing static methods isEven(MyInteger), isOdd(MyInteger), and isPrime(MyInteger)
			if (MyInteger.isEven(myInteger1)) {
				System.out.println("Testing static method isEven(MyInteger); if " +myInteger1.getValue()+ " is even, if this prints, it returned true");
					}else {
						System.out.println("Testing static method isEven(MyInteger); if " +myInteger1.getValue()+ " is even, if this prints, it returned false");}		
			if (MyInteger.isOdd(myInteger1)) {
				System.out.println("Testing static method isOdd(MyInteger); if " +myInteger1.getValue()+ " is odd, if this prints, it returned true");
					}else {
						System.out.println("Testing static method isOdd(MyInteger); if " +myInteger1.getValue()+ " is odd, if this prints, it returned false");}			
			if (MyInteger.isPrime(myInteger1)) {
				System.out.println("Testing static method isPrime(MyInteger); if " +myInteger1.getValue()+ " is prime, if this prints, it returned true");
					}else {
						System.out.println("Testing static method isPrime(MyInteger); if " +myInteger1.getValue()+ " is prime, if this prints, it returned false");}
			
		}
}

class MyInteger{
	
int value;				//An int data field named value that stores the int value represented by this object.

	MyInteger(){
		value = 0;		//A constructor that creates a MyInteger object for the specified int value.
	}	
	MyInteger(int value){
		this.value = value;
		
	}	
	int getValue() {
		return value;		//A non-static getter method that returns the int value.
	}
	void setValue(int newValue) {
		value = newValue;
	}
	boolean isEven() {									 //isEven()
		if (value % 2 == 0) {							//		  \\
			return true;				  			   //		   \\
		}											  //			\\ 
		return false;								 //				 \\
	}												//				  \\
	boolean isOdd() {		//The non-static methods                   isOdd() 
		if (value % 2 != 0) {												 //
			return true;													//
		}																   //
		return false;													  //
	}																	 //
	boolean isPrime() {													//isPrime() that return true if the value in this object is even, odd, or prime, respectively.
		if (value < 2) {
			return false;
		}
		for(int i = 2; i <= Math.sqrt(value); i++) {
			if(value % i == 0) {
				return false;
			}
		}
		return true;
	}
	static boolean isEven(int value) {							 //isEven()
		if (value % 2 == 0) {									//		  \\
			return true;									   //		   \\
		}													  //			\\ 
		return false;										 //				 \\
	}														//				  \\
	static boolean isOdd(int value) {	//The static methods                   isOdd() 
		if (value % 2 != 0) {														 //
			return true;															//
		}																		   //
		return false;															  //
	}																			 //
	static boolean isPrime(int value) {											//isPrime() that return true if the value in this object is even, odd, or prime, respectively.
		if (value < 2) {
			return false;
		}
		for(int i = 2; i <= Math.sqrt(value); i++) {
			if(value % i == 0) {
				return false;
			}
		}
		return true;
	}
	static boolean isEven(MyInteger value) {						 //isEven(MyInterger)
		if (value.value % 2 == 0) {									//		  \\
			return true;										   //		   \\
		}														  //			\\ 
		return false;											 //				 \\
	}															//				  \\
	static boolean isOdd(MyInteger value) {//The static methods                   isOdd(MyInteger) 
		if (value.value % 2 != 0) {													 //
			return true;															//
		}																		   //
		return false;															  //
	}																			 //
	static boolean isPrime(MyInteger value) {									//isPrime(MyInteger) that return true if the value in this object is even, odd, or prime, respectively.
		if (value.value < 2) {
			return false;
		}
		for(int i = 2; i <= Math.sqrt(value.value); i++) {
			if(value.value % i == 0) {
				return false;
			}
		}
		return true;
	}					
	boolean equals(int value) {		//The  non-static methods equals(int) and equals(MyInteger) that return true if the value in this object is equal to the specified value.
		
		return this.value == value;
	}
	boolean equals(MyInteger value) {
		
		return this.value == value.getValue();
	}
	int parseInt(char[]) {
		return 
	}
}
